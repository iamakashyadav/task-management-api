openapi: 3.0.3
info:
  title: Task Management API
  version: "1.0.0"
  description: |
    Multi-User Task Management REST API built with Node.js, Express and MySQL.
    Users can register, log in (JWT), and perform CRUD operations on their own
    tasks. All secured endpoints require the **Authorization: Bearer &lt;token&gt;**
    header.

servers:
  - url: https://task-management-api-g8xl.onrender.com
    description: live server
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Users
    description: End-points for user registration, login and profile update
  - name: Tasks
    description: End-points for creating, reading, updating and deleting tasks
  - name: System
    description: Health-check and other system utilities

security:
  - bearerAuth: []   # apply to all paths by default

paths:
  /users/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "409":
          $ref: '#/components/responses/Conflict'

  /users/login:
    post:
      tags: [Users]
      summary: Log in and receive a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'

  /users/profile:
    put:
      tags: [Users]
      summary: Update authenticated user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        "200":
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'

  /tasks:
    post:
      tags: [Tasks]
      summary: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskMutationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'

    get:
      tags: [Tasks]
      summary: Get paginated list of tasks
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/StatusFilter'
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        "401":
          $ref: '#/components/responses/Unauthorized'

  /tasks/{id}:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    get:
      tags: [Tasks]
      summary: Get a task by ID
      responses:
        "200":
          description: Task detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleTaskResponse'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Tasks]
      summary: Update a task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
      responses:
        "200":
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskMutationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'

    delete:
      tags: [Tasks]
      summary: Delete a task
      responses:
        "204":
          description: Task deleted (no content)
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

  /health:
    get:
      tags: [System]
      summary: Health-check
      security: []   # public
      responses:
        "200":
          description: API status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

# -------------------------------------------------------------------

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Page:
      name: page
      in: query
      description: Page number (â‰¥ 1)
      schema:
        type: integer
        minimum: 1
        default: 1
    Limit:
      name: limit
      in: query
      description: Items per page (1-100)
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    StatusFilter:
      name: status
      in: query
      description: Filter tasks by status
      schema:
        $ref: '#/components/schemas/TaskStatus'
    TaskId:
      name: id
      in: path
      required: true
      description: Task identifier
      schema:
        type: integer
        minimum: 1

  responses:
    BadRequest:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication required or failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Duplicate resource / conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    # ---------- Primitive / reusable ----------
    TaskStatus:
      type: string
      enum: [pending, in_progress, done]

    Pagination:
      type: object
      properties:
        page: { type: integer, example: 1 }
        limit: { type: integer, example: 10 }
        total: { type: integer, example: 15 }
        totalPages: { type: integer, example: 2 }
        hasNextPage: { type: boolean, example: true }
        hasPrevPage: { type: boolean, example: false }

    ErrorResponse:
      type: object
      properties:
        error: { type: string, example: "Validation failed" }
        type: { type: string, example: "ValidationError" }
        timestamp: { type: string, format: date-time }

    # ---------- User ----------
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "John Doe" }
        email: { type: string, example: "john.doe@example.com" }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    RegisterUserRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          minLength: 6
          example: password123

    RegisterUserResponse:
      type: object
      properties:
        message: { type: string, example: User registered successfully }
        user: { $ref: '#/components/schemas/User' }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: john.doe@example.com }
        password: { type: string, minLength: 6, example: password123 }

    LoginResponse:
      type: object
      properties:
        message: { type: string, example: Login successful }
        token: { type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... }
        user:  { $ref: '#/components/schemas/User' }

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: Jane Doe
        email:
          type: string
          format: email
          example: jane.doe@example.com
      oneOf:
        - required: [name]
        - required: [email]

    UpdateProfileResponse:
      type: object
      properties:
        message: { type: string, example: Profile updated successfully }
        user:    { $ref: '#/components/schemas/User' }

    # ---------- Task ----------
    Task:
      type: object
      properties:
        id: { type: integer, example: 1 }
        user_id: { type: integer, example: 1 }
        title: { type: string, example: Complete API Documentation }
        description:
          type: string
          example: Write comprehensive API documentation with examples
        status: { $ref: '#/components/schemas/TaskStatus' }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    TaskCreateRequest:
      type: object
      required: [title, status]
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 100
          example: Complete API Documentation
        description:
          type: string
          maxLength: 1000
          example: Write comprehensive API documentation with examples
        status:
          $ref: '#/components/schemas/TaskStatus'

    TaskUpdateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 1000
        status:
          $ref: '#/components/schemas/TaskStatus'

    TaskMutationResponse:
      type: object
      properties:
        message: { type: string, example: Task created successfully }
        task:    { $ref: '#/components/schemas/Task' }

    SingleTaskResponse:
      type: object
      properties:
        task: { $ref: '#/components/schemas/Task' }

    TaskListResponse:
      type: object
      properties:
        tasks:
          type: array
          items: { $ref: '#/components/schemas/Task' }
        pagination:
          $ref: '#/components/schemas/Pagination'

    # ---------- System ----------
    HealthResponse:
      type: object
      properties:
        status: { type: string, example: OK }
        timestamp: { type: string, format: date-time }
        uptime: { type: number, example: 3600.45 }
        environment: { type: string, example: Development }
